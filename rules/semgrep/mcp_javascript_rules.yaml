# MCP Security Rules for JavaScript/TypeScript
# ==============================================
# Comprehensive security rules for Model Context Protocol implementations
# Supports both CommonJS and ES6/TypeScript syntax patterns
#
# Severity Levels and FICO Score Impact:
# - critical: -120 points (MCP-specific: -160)
# - high: -80 points (MCP-specific: -120)
# - medium: -40 points (MCP-specific: -60)
# - low: -10 points
#
# Author: MCP Security Scanner
# Version: 2.0

rules:
  # ================================================================================
  # 1. AUTHENTICATION AND AUTHORIZATION
  # ================================================================================

  - id: mcp-js-missing-auth
    message: "MCP endpoint lacks authentication or authorization checks"
    severity: high
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
        # Express route without auth middleware
        - patterns:
          - pattern-either:
            - pattern: app.$METHOD($PATH, function(...) { ... })
            - pattern: app.$METHOD($PATH, async (...) => { ... })
            - pattern: router.$METHOD($PATH, (...) => { ... })
          - pattern-not: app.$METHOD($PATH, $AUTH_MIDDLEWARE, ...)
          - pattern-not-inside: |
              if (req.headers.authorization) { ... }
        # FastAPI-style decorators (TypeScript)
        - patterns:
          - pattern: |
              @$DECORATOR($PATH)
              $FUNC(...) { ... }
          - pattern-not: |
              @Authorized()
              ...
        # Generic handler without auth
        - patterns:
          - pattern-either:
            - pattern: function handleRequest(req, res) { ... }
            - pattern: const handleRequest = (req, res) => { ... }
          - pattern-not-inside: |
              if (req.headers.authorization) { ... }
    metadata:
      category: security
      subcategory: authentication
      cwe: "CWE-306: Missing Authentication for Critical Function"
      mcp_specific: true

  # ================================================================================
  # 2. TRANSPORT LAYER SECURITY
  # ================================================================================

  - id: mcp-js-insecure-transport
    message: "Non-TLS endpoint or SSL verification disabled"
    severity: high
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
        # HTTP instead of HTTPS
        - pattern: |
            $URL = "http://..."
        # Axios with SSL disabled
        - pattern: axios.$METHOD(..., { httpsAgent: new Agent({ rejectUnauthorized: false }) })
        # Node fetch without cert validation
        - pattern: fetch($URL, { ..., rejectUnauthorized: false, ... })
        # Express without HTTPS
        - pattern: app.listen($PORT)
        - patterns:
          - pattern: createServer(app)
          - pattern-not: createSecureServer(...)
    metadata:
      category: security
      subcategory: transport
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      mcp_specific: true

  # ================================================================================
  # 3. SENSITIVE DATA EXPOSURE
  # ================================================================================

  - id: mcp-js-sensitive-data-logging
    message: "Secrets, API keys, or tokens may be logged or exposed"
    severity: critical
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
        # Console logging sensitive data
        - patterns:
          - pattern-either:
            - pattern: console.$METHOD(..., $SECRET, ...)
            - pattern: logger.$METHOD(..., $SECRET, ...)
          - metavariable-regex:
              metavariable: $SECRET
              regex: ".*(password|token|api_key|secret|credential|auth).*"
        # Returning sensitive data in response
        - patterns:
          - pattern: res.json({ ..., $KEY: $VALUE, ... })
          - metavariable-regex:
              metavariable: $KEY
              regex: ".*(password|token|api_key|secret).*"
    metadata:
      category: security
      subcategory: data-exposure
      cwe: "CWE-532: Insertion of Sensitive Information into Log File"
      mcp_specific: true

  # ================================================================================
  # 4. INSECURE CODE EXECUTION
  # ================================================================================

  - id: mcp-js-insecure-execution
    message: "Unsafe code execution or injection vulnerability"
    severity: critical
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
        # eval usage
        - pattern: eval($CODE)
        # Function constructor
        - pattern: new Function($CODE)
        # Unsafe JSON parsing
        - pattern: JSON.parse($DATA)
        - patterns:
          - pattern: $VAR = JSON.parse($INPUT)
          - pattern-not: |
              try {
                $VAR = JSON.parse($INPUT)
              } catch { ... }
        # Command injection
        - pattern: exec($CMD)
        - pattern: spawn($CMD, ...)
    metadata:
      category: security
      subcategory: injection
      cwe: "CWE-94: Code Injection"
      mcp_specific: true

  # ================================================================================
  # 5. SESSION MANAGEMENT
  # ================================================================================

  - id: mcp-js-insecure-session-id
    message: "Session IDs generated with weak randomness (Math.random)"
    severity: high
    languages: [javascript, typescript]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: Math.random()
          - pattern: Math.floor(Math.random() * ...)
        - pattern-inside: |
            function $FUNC(...) {
              ...
              $SESSION = ...
              ...
            }
        - pattern-not: |
            import { randomBytes } from 'crypto'
        - pattern-not: |
            const crypto = require('crypto')
    metadata:
      category: security
      subcategory: session
      cwe: "CWE-330: Use of Insufficiently Random Values"
      mcp_specific: true

  - id: mcp-js-missing-logout
    message: "Missing logout or session termination endpoint"
    severity: medium
    languages: [javascript, typescript]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: app.$METHOD("/login", ...)
          - pattern: router.$METHOD("/login", ...)
        - pattern-not: app.$METHOD("/logout", ...)
        - pattern-not: router.$METHOD("/logout", ...)
    metadata:
      category: security
      subcategory: session
      mcp_specific: true

  # ================================================================================
  # 6. RATE LIMITING
  # ================================================================================

  - id: mcp-js-missing-rate-limit
    message: "API endpoint missing rate limiting protection"
    severity: medium
    languages: [javascript, typescript]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: app.$METHOD($PATH, ...)
          - pattern: router.$METHOD($PATH, ...)
        - pattern-not: app.$METHOD($PATH, $RATE_LIMITER, ...)
        - pattern-not: app.use(rateLimit(...))
        - pattern-not-inside: |
            const limiter = rateLimit(...)
    metadata:
      category: security
      subcategory: dos
      cwe: "CWE-770: Allocation of Resources Without Limits"
      mcp_specific: true

  # ================================================================================
  # 7. ORIGIN AND HOST VALIDATION
  # ================================================================================

  - id: mcp-js-missing-origin-validation
    message: "Missing Origin header validation (DNS rebinding vulnerability)"
    severity: high
    languages: [javascript, typescript]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: function $HANDLER(req, res) { ... }
          - pattern: app.$METHOD($PATH, (req, res) => { ... })
        - pattern-not-inside: |
            if (req.headers.origin) { ... }
        - pattern-not-inside: |
            if (req.get('Origin')) { ... }
        - pattern-not: checkOrigin(...)
    metadata:
      category: security
      subcategory: validation
      cwe: "CWE-346: Origin Validation Error"
      mcp_specific: true

  - id: mcp-js-insecure-binding
    message: "Server binding to 0.0.0.0 or non-localhost interface"
    severity: high
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
        - pattern: app.listen($PORT, "0.0.0.0")
        - pattern: server.listen($PORT, "0.0.0.0")
        - pattern: createServer(...).listen($PORT, "0.0.0.0")
    metadata:
      category: security
      subcategory: network
      mcp_specific: true

  # ================================================================================
  # 8. USER CONSENT
  # ================================================================================

  - id: mcp-js-missing-user-consent
    message: "Data-accessing operation without explicit user consent"
    severity: medium
    languages: [javascript, typescript]
    patterns:
      - patterns:
        - pattern-either:
          # File system access
          - pattern: fs.readFile(...)
          - pattern: fs.readFileSync(...)
          # Database operations
          - pattern: $DB.query(...)
          - pattern: $COLLECTION.find(...)
        - pattern-not-inside: |
            if (hasUserConsent(...)) { ... }
        - pattern-not-inside: |
            if (checkPermission(...)) { ... }
    metadata:
      category: privacy
      subcategory: consent
      mcp_specific: true

  # ================================================================================
  # 9. DEPENDENCY SECURITY
  # ================================================================================

  - id: mcp-js-unpinned-dependencies
    message: "Unpinned or loosely pinned dependencies in package.json"
    severity: low
    languages: [json]
    paths:
      include:
        - package.json
    patterns:
      - pattern-either:
        - pattern: |
            "dependencies": {
              ...,
              "$PKG": "latest",
              ...
            }
        - pattern: |
            "dependencies": {
              ...,
              "$PKG": "*",
              ...
            }
        - pattern-regex: "\"[^\"]+\":\\s*\"\\^[0-9]+\\.\\*"  # ^1.* style
    metadata:
      category: security
      subcategory: supply-chain
      mcp_specific: true

  # ================================================================================
  # 10. MCP PROTOCOL COMPLIANCE
  # ================================================================================

  - id: mcp-js-missing-sse-resumption
    message: "SSE transport missing Last-Event-ID resumption support"
    severity: medium
    languages: [javascript, typescript]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: new EventSource($URL)
          - pattern: const sse = new EventSource(...)
        - pattern-not-inside: |
            if (req.headers['last-event-id']) { ... }
    metadata:
      category: protocol
      subcategory: mcp-compliance
      mcp_specific: true

  - id: mcp-js-missing-nonce
    message: "Missing nonce generation for replay protection"
    severity: high
    languages: [javascript, typescript]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: function $HANDLER(req, res) { ... }
          - pattern: app.$METHOD($PATH, (...) => { ... })
        - pattern-not-inside: |
            const nonce = ...
        - pattern-not-inside: |
            if (verifyNonce(...)) { ... }
    metadata:
      category: security
      subcategory: replay-protection
      mcp_specific: true

  # ================================================================================
  # 11. ERROR HANDLING
  # ================================================================================

  - id: mcp-js-verbose-error
    message: "Verbose error messages may leak sensitive information"
    severity: low
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
        # Sending stack traces to client
        - pattern: res.json({ error: $ERR.stack })
        - pattern: res.send($ERR.stack)
        # Exposing internal errors
        - patterns:
          - pattern: |
              catch ($ERR) {
                res.send($ERR)
              }
    metadata:
      category: security
      subcategory: information-disclosure
      mcp_specific: true

  # ================================================================================
  # 12. TYPESCRIPT-SPECIFIC PATTERNS
  # ================================================================================

  - id: mcp-ts-any-type
    message: "Using 'any' type defeats TypeScript's type safety"
    severity: low
    languages: [typescript]
    patterns:
      - pattern-either:
        - pattern: "function $FUNC(...: any): ..."
        - pattern: "let $VAR: any = ..."
        - pattern: "const $VAR: any = ..."
    metadata:
      category: code-quality
      subcategory: type-safety
      mcp_specific: false

  - id: mcp-ts-missing-auth-decorator
    message: "TypeScript controller missing authentication decorator"
    severity: high
    languages: [typescript]
    patterns:
      - patterns:
        - pattern: |
            @Controller(...)
            class $CLASS {
              ...
              @$METHOD(...)
              $FUNC(...) { ... }
              ...
            }
        - pattern-not: |
            @UseGuards($GUARD)
            ...
        - pattern-not: |
            @Authorized()
            ...
    metadata:
      category: security
      subcategory: authentication
      mcp_specific: true