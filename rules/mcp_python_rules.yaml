# MCP Security Rules for Python
# ================================
# Comprehensive security rules for Model Context Protocol implementations
# Based on MCP Security Review document specifications
#
# Severity Levels and FICO Score Impact:
# - critical: -120 points (MCP-specific: -160)
# - high: -80 points (MCP-specific: -120)
# - medium: -40 points (MCP-specific: -60)
# - low: -10 points
#
# Author: MCP Security Scanner
# Version: 2.0

rules:
  # ================================================================================
  # 1. AUTHENTICATION AND AUTHORIZATION
  # ================================================================================

  - id: mcp-py-missing-auth
    message: "MCP endpoint lacks authentication or authorization checks"
    severity: high
    languages: [python]
    patterns:
      - pattern-either:
        # Flask/FastAPI route without auth
        - patterns:
          - pattern: |
              @app.route(...)
              def $FUNC(...):
                  ...
          - pattern-not-inside: |
              @require_auth
              ...
          - pattern-not: |
              if request.headers.get("Authorization"):
                  ...
        # FastAPI without dependencies
        - patterns:
          - pattern: |
              @app.$METHOD(...)
              async def $FUNC(...):
                  ...
          - pattern-not: |
              def $FUNC(..., $USER = Depends($AUTH_FUNC)):
                  ...
        # Generic server handler without auth
        - patterns:
          - pattern: |
              def handle_request($REQ):
                  ...
          - pattern-not: |
              if $REQ.headers.get("Authorization"):
                  ...
    metadata:
      category: security
      subcategory: authentication
      cwe: "CWE-306: Missing Authentication for Critical Function"
      mcp_specific: true
      references:
        - "https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization"

  - id: mcp-py-weak-auth
    message: "Weak or insecure authentication implementation"
    severity: medium
    languages: [python]
    patterns:
      - pattern-either:
        # Hardcoded credentials
        - pattern: |
            if $PASS == "..."
        # Basic auth without HTTPS check
        - patterns:
          - pattern: request.headers.get("Authorization")
          - pattern-not: |
              if request.is_secure:
                  ...
    metadata:
      category: security
      subcategory: authentication
      mcp_specific: true

  # ================================================================================
  # 2. TRANSPORT LAYER SECURITY
  # ================================================================================

  - id: mcp-py-insecure-transport
    message: "Non-TLS endpoint or SSL verification disabled"
    severity: high
    languages: [python]
    patterns:
      - pattern-either:
        # Requests with verify=False
        - pattern: requests.$METHOD(..., verify=False, ...)
        - pattern: httpx.$METHOD(..., verify=False, ...)
        # Server without SSL
        - pattern: app.run(..., ssl_context=None, ...)
        - pattern: app.run(host="0.0.0.0", ...)
        # HTTP scheme
        - pattern: |
            $URL = "http://..."
            requests.$METHOD($URL, ...)
    metadata:
      category: security
      subcategory: transport
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      mcp_specific: true

  # ================================================================================
  # 3. SENSITIVE DATA EXPOSURE
  # ================================================================================

  - id: mcp-py-sensitive-data-logging
    message: "Secrets, API keys, or tokens may be logged or exposed"
    severity: critical
    languages: [python]
    patterns:
      - pattern-either:
        # Logging sensitive variables
        - patterns:
          - pattern-either:
            - pattern: logging.$LEVEL(..., $SECRET, ...)
            - pattern: logger.$LEVEL(..., $SECRET, ...)
            - pattern: print(..., $SECRET, ...)
          - metavariable-regex:
              metavariable: $SECRET
              regex: ".*(password|token|api_key|secret|credential|auth).*"
        # Returning sensitive data
        - patterns:
          - pattern: return {..., "$KEY": $VALUE, ...}
          - metavariable-regex:
              metavariable: $KEY
              regex: ".*(password|token|api_key|secret|credential).*"
    metadata:
      category: security
      subcategory: data-exposure
      cwe: "CWE-532: Insertion of Sensitive Information into Log File"
      mcp_specific: true

  # ================================================================================
  # 4. INSECURE DESERIALIZATION AND CODE EXECUTION
  # ================================================================================

  - id: mcp-py-insecure-deserialization
    message: "Unsafe deserialization or code execution vulnerability"
    severity: critical
    languages: [python]
    patterns:
      - pattern-either:
        # Dangerous functions
        - pattern: eval($EXPR)
        - pattern: exec($EXPR)
        - pattern: compile($EXPR, ...)
        # Pickle without verification
        - pattern: pickle.loads($DATA)
        - pattern: pickle.load($FILE)
        # YAML unsafe loader
        - pattern: yaml.load($DATA)
        - pattern: yaml.load($DATA, Loader=yaml.Loader)
        # JSON with object_hook from untrusted source
        - patterns:
          - pattern: json.loads($DATA, object_hook=$FUNC)
          - pattern-not: |
              def $FUNC(...):
                  # Safe implementation
                  ...
    metadata:
      category: security
      subcategory: injection
      cwe: "CWE-502: Deserialization of Untrusted Data"
      mcp_specific: true

  # ================================================================================
  # 5. SESSION MANAGEMENT
  # ================================================================================

  - id: mcp-py-insecure-session-id
    message: "Session IDs generated with weak randomness"
    severity: high
    languages: [python]
    patterns:
      - pattern-either:
        # Weak random generation
        - pattern: random.random()
        - pattern: random.randint(...)
        - pattern: random.choice(...)
      - pattern-inside: |
          def generate_session_id(...):
              ...
      - pattern-not: |
          import secrets
          ...
      - pattern-not: |
          import uuid
          ...
    metadata:
      category: security
      subcategory: session
      cwe: "CWE-330: Use of Insufficiently Random Values"
      mcp_specific: true

  - id: mcp-py-missing-session-termination
    message: "Missing session termination or logout functionality"
    severity: medium
    languages: [python]
    patterns:
      - patterns:
        # Has login but no logout
        - pattern: |
            @app.route("/login", ...)
            def login(...):
                ...
        - pattern-not: |
            @app.route("/logout", ...)
            def logout(...):
                ...
    metadata:
      category: security
      subcategory: session
      mcp_specific: true

  # ================================================================================
  # 6. RATE LIMITING AND RESOURCE EXHAUSTION
  # ================================================================================

  - id: mcp-py-missing-rate-limit
    message: "API endpoint missing rate limiting protection"
    severity: medium
    languages: [python]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: |
              @app.route(...)
              def $FUNC(...):
                  ...
          - pattern: |
              @app.$METHOD(...)
              async def $FUNC(...):
                  ...
        - pattern-not: |
            @rate_limit(...)
            ...
        - pattern-not: |
            @limiter.limit(...)
            ...
        - pattern-not: |
            if rate_limiter.check(...):
                ...
    metadata:
      category: security
      subcategory: dos
      cwe: "CWE-770: Allocation of Resources Without Limits"
      mcp_specific: true

  # ================================================================================
  # 7. ORIGIN AND HOST VALIDATION
  # ================================================================================

  - id: mcp-py-missing-origin-validation
    message: "Missing Origin header validation (DNS rebinding vulnerability)"
    severity: high
    languages: [python]
    patterns:
      - patterns:
        - pattern-either:
          # HTTP handler without origin check
          - pattern: |
              def handle_request($REQ, $RES):
                  ...
          - pattern: |
              @app.route(...)
              def $FUNC(...):
                  ...
        - pattern-not: |
            if $REQ.headers.get("Origin"):
                ...
        - pattern-not: |
            if request.headers.get("Origin"):
                ...
        - pattern-not: |
            check_origin(...)
    metadata:
      category: security
      subcategory: validation
      cwe: "CWE-346: Origin Validation Error"
      mcp_specific: true

  - id: mcp-py-insecure-binding
    message: "Server binding to 0.0.0.0 or non-localhost interface"
    severity: high
    languages: [python]
    patterns:
      - pattern-either:
        - pattern: app.run(host="0.0.0.0", ...)
        - pattern: bind("0.0.0.0", ...)
        - pattern: HTTPServer(("0.0.0.0", $PORT), ...)
        - pattern: serve(..., host="0.0.0.0", ...)
    metadata:
      category: security
      subcategory: network
      mcp_specific: true

  # ================================================================================
  # 8. USER CONSENT AND PRIVACY
  # ================================================================================

  - id: mcp-py-missing-user-consent
    message: "Data-accessing operation without explicit user consent"
    severity: medium
    languages: [python]
    patterns:
      - patterns:
        - pattern-either:
          # File system access
          - pattern: open($FILE, ...)
          - pattern: Path($FILE).read_text()
          # Database access
          - pattern: $DB.execute(...)
          - pattern: $COLLECTION.find(...)
        - pattern-not: |
            if user_consent(...):
                ...
        - pattern-not: |
            if check_permission(...):
                ...
    metadata:
      category: privacy
      subcategory: consent
      mcp_specific: true

  # ================================================================================
  # 9. SUPPLY CHAIN AND DEPENDENCIES
  # ================================================================================

  - id: mcp-py-unpinned-dependencies
    message: "Unpinned or loosely pinned dependencies in requirements"
    severity: low
    languages: [generic]
    paths:
      include:
        - requirements.txt
        - requirements*.txt
    patterns:
      - pattern-either:
        - pattern-regex: "^[a-zA-Z0-9-_]+$"  # No version at all
        - pattern-regex: "^[a-zA-Z0-9-_]+>=.*"  # Only minimum version
        - pattern-regex: ".*\\*.*"  # Wildcard version
    metadata:
      category: security
      subcategory: supply-chain
      mcp_specific: true

  # ================================================================================
  # 10. MCP-SPECIFIC PROTOCOL COMPLIANCE
  # ================================================================================

  - id: mcp-py-missing-sse-resumption
    message: "SSE transport missing Last-Event-ID resumption support"
    severity: medium
    languages: [python]
    patterns:
      - patterns:
        - pattern: |
            class $CLASS:
                ...
                def send_event(...):
                    ...
        - pattern-not: |
            if request.headers.get("Last-Event-ID"):
                ...
    metadata:
      category: protocol
      subcategory: mcp-compliance
      mcp_specific: true

  - id: mcp-py-missing-nonce
    message: "Missing nonce generation for replay protection"
    severity: high
    languages: [python]
    patterns:
      - patterns:
        - pattern-either:
          - pattern: |
              def handle_request($REQ):
                  ...
          - pattern: |
              @app.route(...)
              def $FUNC(...):
                  ...
        - pattern-not: |
            nonce = ...
        - pattern-not: |
            if verify_nonce(...):
                ...
    metadata:
      category: security
      subcategory: replay-protection
      mcp_specific: true

  # ================================================================================
  # 11. ERROR HANDLING AND INFORMATION DISCLOSURE
  # ================================================================================

  - id: mcp-py-verbose-error
    message: "Verbose error messages may leak sensitive information"
    severity: low
    languages: [python]
    patterns:
      - pattern-either:
        # Returning exception details
        - pattern: |
            except $EXC as e:
                return str(e)
        # Debug mode in production
        - pattern: app.run(..., debug=True, ...)
    metadata:
      category: security
      subcategory: information-disclosure
      mcp_specific: true