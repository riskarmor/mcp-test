# Heuristic Deployment Mode Detection Rules for Python
# ======================================================
# These rules detect patterns that indicate the deployment mode of an MCP implementation.
# Used to determine which security rules should apply to the repository.
#
# Deployment Modes:
# - trusted-host-only: stdio-based, local execution, no network exposure
# - standalone: network server with authentication, public-facing
# - mixed-use: supports both modes via configuration
#
# Author: MCP Security Scanner
# Version: 2.0

rules:
  # ================================================================================
  # TRUSTED-HOST-ONLY DETECTION
  # ================================================================================

  - id: mcp-py-heuristic-trusted-host-only
    message: "MCP appears to be trusted-host-only (stdio-only, no network/server)"
    severity: INFO
    languages: [python]
    patterns:
      - pattern-either:
        # Direct stdio usage
        - patterns:
          - pattern-either:
            - pattern: sys.stdin.read()
            - pattern: sys.stdout.write(...)
            - pattern: sys.stdin.readline()
          - pattern-not: app.run(...)
          - pattern-not: serve(...)
        # MCP stdio transport
        - pattern: get_stdio_transport()
        - pattern: StdioTransport()
        - pattern: MCPServer(stdio=True)
        # JSON-RPC over stdio
        - patterns:
          - pattern: json.loads(sys.stdin.read())
          - pattern-not: flask.Flask(...)
          - pattern-not: FastAPI()
    metadata:
      deployment_mode: trusted-host-only
      category: heuristic
      confidence: high

  # ================================================================================
  # STANDALONE DETECTION
  # ================================================================================

  - id: mcp-py-heuristic-standalone
    message: "MCP runs as a network server with authentication (standalone mode)"
    severity: INFO
    languages: [python]
    patterns:
      - patterns:
        # Network binding present
        - pattern-either:
          - pattern: app.run(host="0.0.0.0", ...)
          - pattern: app.run(host=$HOST, port=$PORT, ...)
          - pattern: serve(..., host="0.0.0.0", ...)
          - pattern: HTTPServer(("0.0.0.0", $PORT), ...)
          - pattern: uvicorn.run(..., host="0.0.0.0", ...)
        # Authentication present
        - pattern-either:
          - pattern: |
              if request.headers.get("Authorization"):
                  ...
          - pattern: |
              @require_auth
              ...
          - pattern: |
              def $FUNC(..., user=Depends(get_current_user)):
                  ...
          - pattern: |
              if not check_api_key(...):
                  ...
    metadata:
      deployment_mode: standalone
      category: heuristic
      confidence: high

  - id: mcp-py-heuristic-standalone-https
    message: "MCP server with HTTPS/TLS configuration (standalone mode)"
    severity: INFO
    languages: [python]
    patterns:
      - pattern-either:
        # SSL context configuration
        - pattern: app.run(..., ssl_context=..., ...)
        - pattern: serve(..., ssl=..., ...)
        - pattern: |
            context = ssl.create_default_context(...)
            ...
            app.run(..., ssl_context=context, ...)
        # Certificate loading
        - pattern: ssl_context.load_cert_chain(...)
    metadata:
      deployment_mode: standalone
      category: heuristic
      confidence: high

  # ================================================================================
  # MIXED-USE DETECTION
  # ================================================================================

  - id: mcp-py-heuristic-mixed-use
    message: "MCP supports both trusted-host and standalone modes (mixed-use)"
    severity: INFO
    languages: [python]
    patterns:
      - pattern-either:
        # Environment-based mode switching
        - pattern: |
            if os.environ.get("MCP_MODE") == "standalone":
                ...
            else:
                ...
        - pattern: |
            if config.get("deployment_mode") == "network":
                app.run(...)
            else:
                stdio_transport()
        # Conditional authentication
        - pattern: |
            if config.auth_enabled:
                @require_auth
            else:
                @no_auth
        # Dynamic transport selection
        - pattern: |
            transport = get_transport(config.transport_type)
        - pattern: |
            if args.stdio:
                transport = StdioTransport()
            else:
                transport = HTTPTransport()
    metadata:
      deployment_mode: mixed-use
      category: heuristic
      confidence: high

  # ================================================================================
  # ADDITIONAL INDICATORS
  # ================================================================================

  - id: mcp-py-heuristic-no-network
    message: "No network server code detected (likely trusted-host-only)"
    severity: INFO
    languages: [python]
    patterns:
      - patterns:
        # Has MCP imports but no server
        - pattern-either:
          - pattern: from mcp import ...
          - pattern: import mcp
        - pattern-not: app = Flask(...)
        - pattern-not: app = FastAPI()
        - pattern-not: HTTPServer(...)
        - pattern-not: app.run(...)
    metadata:
      deployment_mode: trusted-host-only
      category: heuristic
      confidence: medium

  - id: mcp-py-heuristic-config-based
    message: "Configuration-driven deployment mode"
    severity: INFO
    languages: [python]
    patterns:
      - pattern-either:
        # Config file loading for mode
        - pattern: |
            config = load_config(...)
            ...
            if config["mode"] == ...:
                ...
        # YAML/JSON config for deployment
        - pattern: |
            with open("mcp.json") as f:
                config = json.load(f)
                ...
                mode = config.get("deployment_mode")
        # Environment variable configuration
        - pattern: |
            MCP_DEPLOYMENT = os.getenv("MCP_DEPLOYMENT", "trusted")
    metadata:
      deployment_mode: mixed-use
      category: heuristic
      confidence: medium