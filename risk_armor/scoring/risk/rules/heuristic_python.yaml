rules:
- id: mcp-py-heuristic-trusted-host-only
  message: 'Heuristic: MCP appears to be trusted-host-only (stdio-only, no network/server,
    no auth detected).'
  severity: INFO
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: 'import sys

        sys.stdin'
    - pattern: get_stdio_transport()
    - pattern: $VAR = MCPServer(stdio=...)
  - pattern-not: app.run(host=...)
  - pattern-not: bind("0.0.0.0", ...)
  - pattern-not: if "Authorization" in ...
  metadata:
    deployment_mode: trusted-host-only
    category: heuristic
- id: mcp-py-heuristic-standalone
  message: 'Heuristic: MCP runs as a network server with auth (likely standalone).'
  severity: INFO
  languages:
  - python
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: app.run(host="0.0.0.0")
      - pattern: bind("0.0.0.0", ...)
      - pattern: HTTPServer(('', $PORT), $HANDLER)
    - pattern-either:
      - pattern: 'if "Authorization" in request.headers:'
      - pattern: 'def $FUNC(..., $USER = Depends($AUTH_FUNC)):'
      - pattern: 'if config.security.auth.enabled:'
      - pattern: '@require_auth'
  metadata:
    deployment_mode: standalone
    category: heuristic
- id: mcp-py-heuristic-mixed-use
  message: 'Heuristic: MCP supports both trusted-host and public server modes.'
  severity: INFO
  languages:
  - python
  pattern-either:
  - pattern: "if os.environ.get(\"MCP_MODE\") == \"standalone\":\n    $SECURE = True"
  - pattern: "if config.public_enabled:\n    app.run(host=\"0.0.0.0\")"
  - pattern: 'if $CONFIG.auth.enabled:'
  metadata:
    deployment_mode: mixed-use
    category: heuristic
